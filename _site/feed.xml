<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0x90</title>
    <description>&quot;0x90&quot; Zone (or NoOperation Zone). There is actually nothing to see here. This website is for my personal infosec research. Opinions are mine only. It's a blog, you can find some articles about what I get in the field. Constructive comments are welcome. Have fun, stay safe.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 19 Feb 2018 09:18:44 +0000</pubDate>
    <lastBuildDate>Mon, 19 Feb 2018 09:18:44 +0000</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Path Traversal Reprise Licence Manager (CVE-2018-5716)</title>
        <description>&lt;p&gt;This post will demonstrate a vulnerability in the &lt;strong&gt;Reprise Licence Manager (RLM) version 11.0&lt;/strong&gt;  found while doing a pentest. The vulnerability in question allows a user with access to the Web Management Interface to access (and sometimes write) files in the System.&lt;/p&gt;

&lt;p&gt;This vulnerability allows to access files, and therefore gather aditional info about the system, and also delete the log file of the RLM server (in case of the file write permission).&lt;/p&gt;

&lt;p&gt;This situation was reported to the &lt;strong&gt;Reprise Software Inc.&lt;/strong&gt; and was promply considered &lt;strong&gt;NOT A VULNERABILITY&lt;/strong&gt; since the application was to be installed as a non-priviledged user. However I strongly disagree since an attacker can access some files that are available for all users on the system. This issue could be easly resolved by having a list of files where the application can access and limit the access to the Web Application only.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;CVE (CVE-2018-5716)&lt;/strong&gt; was issued for this vulnerability and is going to be released soon.&lt;/p&gt;

&lt;p&gt;Without any further ado here comes the details of it:&lt;/p&gt;

&lt;p&gt;An attacker who can access the Web Management Interface can edit licence files, license files have an arbitrary path where a person can edit. Changing the path to some other file will render it access to that file.&lt;/p&gt;

&lt;p&gt;One interesting aspect is that you can write any extension for the file so .EXE files where an attacker could write executable files. However, &lt;strong&gt;the [&amp;lt;&amp;gt;&amp;amp;] aren’t allowed&lt;/strong&gt; so introducing WebShells won’t be so easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/reprise_path_traversal/reprise_exe_upload.png&quot; alt=&quot;Uploading an EXE Extension File&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vector itself that this vulnerability is refering will be located on the http(s)://ipOfServer:port/&lt;strong&gt;/goform/edit_lf_get_data&lt;/strong&gt;. Analysing the request with burp we can see the parameter where a full path of a file is being send:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/reprise_path_traversal/reprise_path_trans.png&quot; alt=&quot;Request with potention Arbitrary file Read&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we change the path to some file out of the directory structure, like for example the hosts file in windows we can see the response in the Web browser where the file will be presented:
&lt;img src=&quot;http://localhost:4000/images/reprise_path_traversal/reprise_path_hosts.png&quot; alt=&quot;Arbitrary File Read&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/images/reprise_path_traversal/reprise_exploited.png&quot; alt=&quot;Arbitrary File Read 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see in the picture above a file outside the Web root was acessed without any control. The matter is worsen since the application accepts in the user interface any file, by direct input thus Reprise Software Inc. won’t consider this a vulnerability. However an attacker can overwrite some important files, like the application log hence hidding their tracks. A solution passes by limiting the file access to the directory structure or to a license folder, avoiding the writting of files with different extensions.&lt;/p&gt;

&lt;p&gt;Next I present to you the form where you can input any file to be read (and then overwritten, giving the permissions):
&lt;img src=&quot;http://localhost:4000/images/reprise_path_traversal/reprise_arb1.png&quot; alt=&quot;Arbitrary File Read 3&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/images/reprise_path_traversal/reprise_arb2.png&quot; alt=&quot;Arbitrary File Read 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For testing and record next is the about page where it states the product version:
&lt;img src=&quot;http://localhost:4000/images/reprise_path_traversal/reprise_about.png&quot; alt=&quot;About&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On conclusion, this is my opinion &lt;strong&gt;only&lt;/strong&gt;, that this behaviour represents a danger since the attacker can read arbitrary data provided its stored on the disk &lt;strong&gt;AND&lt;/strong&gt; we have permission to read. However a lot of information can be retrieved from files that have low permissions standards. The recomendation that the company gave me is to lower the permissions level so the application can’t read critical files, but I think that solution won’t be enough and based on the OWASP Path Transversal (&lt;a href=&quot;https://www.owasp.org/index.php/Path_Traversal&quot;&gt;OWASP Path Transversal&lt;/a&gt;) it is still considered a vulnerability. There is the possibility to disable the interface.&lt;/p&gt;

&lt;p&gt;I hereby don’t incentivize to exploit this vulnerability for malicious purposes and my research was only an academic one without interference or harm to any people.&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Feb 2018 16:20:51 +0000</pubDate>
        <link>http://localhost:4000/web/path-traversal/2018/02/16/Path-Traversal-Reprise-LM.html</link>
        <guid isPermaLink="true">http://localhost:4000/web/path-traversal/2018/02/16/Path-Traversal-Reprise-LM.html</guid>
        
        
        <category>web</category>
        
        <category>path-traversal</category>
        
      </item>
    
      <item>
        <title>CSRF and COORS the misconfiguration that will own you.</title>
        <description>&lt;p&gt;A lot of requendations about security are “don’t browse sites that you don’t know”. People can ask why is that. How visiting a website that i don’t fully trust can compromise me or other sites that I use.&lt;/p&gt;

&lt;p&gt;Today I embarked on a quest to try to show people (and some shitty computer security firms that don’t consider this a vulnerability) why that’s absolutely wrong. Shortly I will setup an environment and perform the attack on a small lab to show you how to use it and how to defend against it. 
CSRF or cross-site request forgery is an attack that where a website makes an HTTP request to other site and triggers an action. This action can be, changing a password, creating a new user on the application (useful if there is an administration panel). This vulnerability appears on many security devices and the attacker can exploit them to whereas extent it wants, however some criteria are required for it to be successful:
The attacker must know the complete address of the service 
The parameters for the call should be known, or at least, deterministic
The victim should be already logged in&lt;/p&gt;

&lt;p&gt;The first criteria could be met or by inside knowledge or OSINT (Open Source Intelligence) or scanning. A simple way is, imagine you are a pentester and you already are on the network and see a known security appliance that has a CSRF vulnerability to add users that will allow you to control, with high privileges the network perimeter. You know the appliance (Software), the version and the address, so it’s should be fairly straight forward to attack.&lt;/p&gt;

&lt;p&gt;The second criteria comes with the first one, when you identify the software its easy to find the request that will trigger the attack. You can setup Burp to intercept the requests of the browser or you can simple use the developers tools on the main browsers (Chrome/Firefox) and navigate to the ‘Network’ Tab and inspect the traffic generated by a Web Application. By clicking on the request you can inspect all the parameters and check if there is any “csrf_token” parameter that will block our attack.&lt;/p&gt;

&lt;p&gt;The third criteria is a bit of chance. If its a portal that we know the victim uses we will probably achieve our goal, otherwise we may not. Other techniques could be used link traffic inspection to check if its communicating with the server (if we check for the destination IP in a SSL/TLS connection).&lt;/p&gt;

&lt;p&gt;In some environments with federal authentication (or similar) where the login is the same for all the Web applications on the same domain even if the victim didn’t login on the specific portal the session cookie still exists and can be  used to access the portal nevertheless. I say can since some federal authentication services may require a confirmation before allowing the specific web application to continue.&lt;/p&gt;

&lt;p&gt;Now with that in mind lets begin with our scenario. We have two Web sites the official site (at 192.168.155.114)and the attackers website (at 192.168.155.133). The official site is a site where a user has to login to make a transaction. For sake of brevity the official website has a predefined login with the username being “victim” and the password “pass”, by requesting the transaction a session variable is stored and saved not allowing any more submissions. Please disregard the other vulnerabilities on the site like the username and password being submitted via GET request we are not focusing on that right now. Here is the code for the official WebSite:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;session_start();

if(!isset($_SESSION['logedin'])){

    if( isset($_GET[&quot;username&quot;]) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isset( $_GET[&quot;password&quot;])){
        if( $_GET[&quot;username&quot;]==='victim' &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  $_GET[&quot;password&quot;]==='pass'){
            $_SESSION['logedin']=true;

        }

    }else{
        echo '&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bankpage/index.php&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	  Username:&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
	  Last name:&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
		  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
			';
    }
}

if (isset($_SESSION['logedin']) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $_SESSION['logedin']==true)
{
    if(isset($_SESSION['transactions'])){
        echo 'Transaction
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;';
        echo $_SESSION['transactions'];

    }else{
        if(isset($_GET['transaction_number'])){
            $_SESSION['transactions']='Transaction Made='.$_GET['transaction_number'];
            header(&quot;Refresh:0&quot;);
        }

        else{
            echo 'No transactions have been made';


            //Make transaction
            echo '
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bankpage/index.php&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transaction_number&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Submit&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
	';
        }

    }
}
#DONT FORGET THE PHP TAGS!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The attackers website is the one that, once visited, makes the cross site request and triggers the transaction. It’s just simple as that, just visit the website and before you know it, the attack has already been done. And here is the code for the attackers site:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; ATACCKERS &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://192.168.155.114/bankpage/index.php?transaction_number=1337&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The attack procedes as follows, the victim accesses the website and logins in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/csrf/official_login.PNG&quot; alt=&quot;Official Website&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we see in the next image, there are no transaction done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/csrf/victim_transactions.PNG&quot; alt=&quot;After the login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By visiting the attacker website and triggering the attack we go back then to the official site and see a transaction that we haven’t done knowingly. 
&lt;img src=&quot;http://localhost:4000/images/csrf/attack.PNG&quot; alt=&quot;Attack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we refresh the official page we now see the transaction that has been made.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/csrf/attack_done.PNG&quot; alt=&quot;Attack Done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now for the fun part. There are a lot of ways to do this easily. The first one is by creating and img tag and point the source for the address to attack. If we need a POST request we can create a form with it and when the page is loaded it triggers the event and submit the form.
One thing that you should have in mind is that browsers nowadays are more “intelligent” than a few years back and when submitting and AJAX request it will be blocked. The reason for this is CORS (Cross Origin Resource Sharing). This HTTP header tries to block requests to other sites that don-t specially specifies the origin host. Some sites provide an external API where the website makes requests to and that API should implement CORS for modern browsers to work. This isn’t valid for some HTML tags since almost everyone uses, for images at least, external resources.&lt;/p&gt;

&lt;p&gt;To detect this attack on you website you could simple check for external HTTP Referer on the logs for your API. If a website that you know is used for this attack or suspect its being used it will show as a different Referer.&lt;/p&gt;

&lt;p&gt;To fully mitigate this issue we should employ CSRF_TOKEN verification in all forms that will trigger some action in the database. Solutions build in django, for instance, already required to add the token by default in every form, for Apache lovers we can use mod_csrf (&lt;a href=&quot;http://mod-csrf.sourceforge.net/&quot;&gt;mod_csrf&lt;/a&gt;) or in code (&lt;a href=&quot;https://www.owasp.org/index.php/PHP_CSRF_Guard&quot;&gt;PHP_CSRF_GUARD&lt;/a&gt;). Ultimately the web developer should use this by default while developing the Web Application. Since the attacker can’t have the token easely he can’t submit the form.&lt;/p&gt;

&lt;p&gt;References: &lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)&quot;&gt;OWASP CSRF &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy New Year for everyone!&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Dec 2017 23:00:00 +0000</pubDate>
        <link>http://localhost:4000/websecurity/2017/12/11/CSRFandCOORS.html</link>
        <guid isPermaLink="true">http://localhost:4000/websecurity/2017/12/11/CSRFandCOORS.html</guid>
        
        
        <category>WebSecurity</category>
        
      </item>
    
      <item>
        <title>How to not implement Security - A tale of Hidden Text</title>
        <description>&lt;p&gt;Finnaly with some time to write. This time I want to point out a very usual mistake done in Web Applications programming wich is hidding content with JavaScript. Time and time again I see this “Mistake”, on Universities, Shopping sites and on web newspappers.&lt;/p&gt;

&lt;p&gt;Recently I was browsing a news site and suddenly I couldn’t load the whole story since I was using an ad-blocker and since I didn’t pay for a subscription (Obviously). Altough it was a very interesting story and I really wanted to read.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/publicoStory/limitedeArtigos.png&quot; alt=&quot;Reaching Limit of Articles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And after the limit is reached we are presented with this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/publicoStory/limiteReached.png&quot; alt=&quot;Limit Reached&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The very first thing that I saw was a subtle fade-out of the text on the story and I started wondering were the hell the text went. Of course, being me the very next thing is to see the source-code and, surprise surprise. There was the rest of the story. Not in a so friendly view but I could finish reading it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/publicoStory/sourceLimiteReached.png&quot; alt=&quot;Source Code of the Article&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then check other stories and the same thing happend, the story will be loaded but it will be hidden. Python to the rescue then! I created a litle script that recieves the URL of the story and clean everything to present with the raw text of the story. I could obviously create a document with all the images and stuff but, normally, the images appear on the header of the page and are not hidden (Some exceptions apply).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#This script will show, in a more user-friendly way, the hidden news in the publico.pt website&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Check for news link&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No News Portal was passed&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Execute the request&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;noticia&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Parse the data to be more user-friendly&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noticia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'html.parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;story-body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stripExtra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;&amp;lt;[a-zA-Z/]*&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stripExtra&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/publicoStory/pythonInAction.png&quot; alt=&quot;Article from the Script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To summarize, if you are building a web portal. Check permissions first hand and don’t just hide information. A simple mitigation for this issue is to, when clicking on the button to read the whole story an AJAX request is made to the server where is going to check the login information. This will help the changes not be so abrupt to the application.
Also, this is just an example of what could happen I don’t endorse this method and if you really want to read some the news on this or another paid website, you should contribuite to that newspapper so they can keep doing their good job.&lt;/p&gt;

</description>
        <pubDate>Mon, 10 Jul 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/javascript/2017/07/10/How-To-Not-Implement-Security.html</link>
        <guid isPermaLink="true">http://localhost:4000/javascript/2017/07/10/How-To-Not-Implement-Security.html</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>DirList PHP Partial Path Transversion (PNG/JPG and MP3 Files)</title>
        <description>&lt;p&gt;When I was auditing a website I came across a directory List using a well-known code, DirList. This code supplies the client to a directory list of files and allow for management with a nice interface without having to remotly login in the web server.
I quickly check for exploits and, at this date, there was two &lt;a href=&quot;https://www.exploit-db.com/exploits/41083/&quot;&gt;Arbitrary File Upload&lt;/a&gt; and &lt;a href=&quot;https://www.exploit-db.com/exploits/37617/&quot;&gt;Local File Inclusion&lt;/a&gt;. However these exploit were already patched. So I download a copy for myself and start thinkering to see if someone forgot something.&lt;/p&gt;

&lt;p&gt;When I check the exploits both were mitigated, however there was a piece of code that caught my eye.
In the “Media” files the flawed code was present.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$folder = '../'.$dir_to_browse.base64_decode($_GET['folder']);

if(!is_dir($folder)) die(&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;Error:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; Folder specified does not exist. This could be because you manually entered the folder name in the URL or you don't have permission to access this folder&quot;);

$content = get_dir_content($folder);

foreach($content['files']['name'] as $key =&amp;gt; $val)
{
	if(in_array(strtolower(strrchr($val, '.')), array('.jpg', '.jpeg', '.png', '.gif')))
	{
		$path = $folder.'/'.$val;
		$images_paths[] = $path;

		@$js_images_names .= '\''.$val.'\', ';
		@$js_images_file_sizes .= '\''.letter_size(filesize($path)).'\', ';

		$dimensions = getimagesize($path);
		$images_widths[] = $dimensions[0];
		$images_heights[] = $dimensions[1];

		@$js_images_heights .= '\''.$dimensions[1].'\', ';
		@$js_images_widths .= '\''.$dimensions[0].'\', ';
		@$js_images_download_link .= '\''.base64_encode($dir_to_browse.base64_decode($_GET['folder']).'/'.$val).'\', ';
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can notice on this piece of code that the GET parameter is passed to the “$folder” variable without being verified for illegal characters. This allows someone to choose an arbitrary location.
However in the foreach cycle it checks the file extension for images, since this is a media gallery.
The main concern is to encode our path to base64 so it can be decoded when it reaches to the attribuition to the “$folder” variable.&lt;/p&gt;

&lt;p&gt;To test if it can be indeed vulnerable I encoded a common path in my testing machine (“../../../../etc/grub.d/backup/boot_grub/themes/ubuntu-mate/”) and finally I got a result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/dirListPathTransversial.png&quot; alt=&quot;GettingPartialPathTransversial&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This allows an attacker to search for images on the web application and outside of it.
This is a limited attack but since it’s common to see one server hosting several applications it can be usefull in some scenarios. One scenario that I can immagine is if a Scanner is attached or it has a folder where clients drop proof of purchase and the filename is unknown It can be usefull not only to get the filename but the image if it is uploaded as images.&lt;/p&gt;

&lt;p&gt;A similar vulnerability is present in “media_player_files/generate_playlist.php”. This file will generate a playlist of mp3 files but it suffers from the same vulnerability as the previous one, but insted of images its “.mp3” files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$folder = '../../'.$dir_to_browse.base64_decode($_GET['folder']);
$dir_content = get_dir_content($folder);
$mp3s = array();

//filter out to keep only mp3 files
foreach($dir_content['files']['name'] as $val)
	if(strtolower(strrchr($val, '.')) == '.mp3')
		$mp3s[] = $val;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mitigation: Normally sysadmins deploy these files but don’t actually need them. One option is not to deploy them. The other one is to parse the input to a list of known available directories so they can be listed or filter the input to decode the base64 and prevent illegal chars (illegal such as .. and . aswell as others).&lt;/p&gt;

&lt;p&gt;Probably there could be even more problems but I haven’t look at it. I encourage everyone to test them.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Apr 2017 19:00:00 +0100</pubDate>
        <link>http://localhost:4000/web/php/path_transversion/2017/04/16/DirList-Gallery.html</link>
        <guid isPermaLink="true">http://localhost:4000/web/php/path_transversion/2017/04/16/DirList-Gallery.html</guid>
        
        
        <category>Web</category>
        
        <category>PHP</category>
        
        <category>Path_Transversion</category>
        
      </item>
    
      <item>
        <title>Morning Post</title>
        <description>&lt;p&gt;Welcome to 0x90 zone! In here you’ll find my adventures on infosec bussiness. The information in this site is for education porpuses only and should NOT be used to create harm or havok.
For those who don’t know me I’m a student and currently working on infosec, so i’m always still learning. Sometimes you’ll see some basic stuff (most of time) sometimes you’ll see some freak stuff, it depends.
I created this site to alert people for some issues in this world so they can protect themselves. Comments are allowed if they are constructive ones, everyone gains with that.
If you want you can follow me on twitter, usually I retweet articles that I found usefull for a day-to-day work in infosec.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Apr 2017 17:20:51 +0100</pubDate>
        <link>http://localhost:4000/init/2017/04/16/Morning-Post.html</link>
        <guid isPermaLink="true">http://localhost:4000/init/2017/04/16/Morning-Post.html</guid>
        
        
        <category>init</category>
        
      </item>
    
  </channel>
</rss>
